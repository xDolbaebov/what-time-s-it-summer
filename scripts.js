// ----- –¢–∞–π–º–µ—Ä -----
function updateCountdown() {
  const now = new Date();
  const targetDate = new Date(2025, 5, 1, 0, 0, 0);
  const diff = targetDate - now;

  if (diff <= 0) {
    document.getElementById("countdown").innerHTML = "<h2>üéâ 1 –∏—é–Ω—è 2025 –Ω–∞—Å—Ç—É–ø–∏–ª–æ! üéâ</h2>";
    clearInterval(timerInterval);
    return;
  }

  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diff % (1000 * 60)) / 1000);

  document.getElementById("days").textContent = String(days).padStart(2, "0");
  document.getElementById("hours").textContent = String(hours).padStart(2, "0");
  document.getElementById("minutes").textContent = String(minutes).padStart(2, "0");
  document.getElementById("seconds").textContent = String(seconds).padStart(2, "0");

  // –û–±–Ω–æ–≤–ª—è–µ–º data-text –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≥–ª–∏—á–∞
  document.getElementById("days").setAttribute("data-text", String(days).padStart(2, "0"));
  document.getElementById("hours").setAttribute("data-text", String(hours).padStart(2, "0"));
  document.getElementById("minutes").setAttribute("data-text", String(minutes).padStart(2, "0"));
  document.getElementById("seconds").setAttribute("data-text", String(seconds).padStart(2, "0"));
}

const timerInterval = setInterval(updateCountdown, 1000);
updateCountdown();

// ----- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º -----
const themes = [
  "modern.css",
  "cyberpunk.css",
  "pink.css",
  "green.css"
];

const themeStylesheet = document.getElementById("themeStylesheet");
const changeThemeButton = document.getElementById("changeTheme");

let currentThemeIndex = localStorage.getItem("themeIndex") || 0;
themeStylesheet.href = themes[currentThemeIndex];

changeThemeButton.addEventListener("click", () => {
  currentThemeIndex = (parseInt(currentThemeIndex) + 1) % themes.length;
  themeStylesheet.href = themes[currentThemeIndex];
  localStorage.setItem("themeIndex", currentThemeIndex);
});

// ----- –ü–ª–µ–µ—Ä –¥–ª—è –º—É–∑—ã–∫–∏ -----
const backgroundMusic = document.getElementById('backgroundMusic');

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–∫–∞ –∏ –ø–µ—Ä–µ–º–æ—Ç–∫–∏ (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ –∏—Ö –≤ HTML)
const currentTimeSpan = document.getElementById('currentTime'); // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
const durationSpan = document.getElementById('duration');       // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
const seekBar = document.getElementById('seekBar');             // –ü–æ–ª–∑—É–Ω–æ–∫ –ø–µ—Ä–µ–º–æ—Ç–∫–∏

// –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
const tracks = [
    { name: "Funk Da Montanha - IMMORTAL PLAYA, SCARIONIX, chipbagov", src: "music/Funk Da Montanha -  IMMORTAL PLAYA, SCARIONIX, chipbagov.mp3" },
    { name: "steve lacy - bad habit (jalenrekt remix)", src: "music/steve lacy - bad habit (jalenrekt remix).mp3" },
    { name: "CHRYSTAL - THE DAYS (NOTION REMIX)", src: "music/CHRYSTAL - THE DAYS (NOTION REMIX).mp3" },
    { name: "DJ Stonik1917 - GoodDayFlopTray", src: "music/DJ Stonik1917 - GoodDayFlopTray.mp3" },
    { name: "RICO Ray - Topic ‚Äì Notion (RICO Ray Version)", src: "music/RICO Ray - Topic ‚Äì Notion (RICO Ray Version).mp3" },
    { name: "–°–µ–∫—Ä–µ—Ç - –ú–æ—è –ª—é–±–æ–≤—å –Ω–∞ –ø—è—Ç–æ–º —ç—Ç–∞–∂–µy", src: "music/–ë–∏—Ç_–∫–≤–∞—Ä—Ç–µ—Ç_–°–µ–∫—Ä–µ—Ç_–ú–æ—è_–ª—é–±–æ–≤—å_–Ω–∞_–ø—è—Ç–æ–º_—ç—Ç–∞–∂–µ_1986.mp3" },
    { name: "–î–∞–π—Ç–µ —Ç–∞–Ω–∫(!) - –õ—é–¥–∏", src: "music/–î–∞–π—Ç–µ —Ç–∞–Ω–∫(!) - –õ—é–¥–∏.mp3" },
    { name: "–î–∞–π—Ç–µ —Ç–∞–Ω–∫ (!) - –£—Ç—Ä–æ", src: "music/–î–∞–π—Ç–µ —Ç–∞–Ω–∫ (!) - –£—Ç—Ä–æ.mp3" },
    { name: "I GOT U - Toxi$", src: "music/I GOT U-Toxi$.mp3" }
];
let currentTrackIndex = 0;

function loadTrack(index) {
    const track = tracks[index];
    backgroundMusic.src = track.src;
    backgroundMusic.load();
    document.getElementById('currentTrackName').textContent = track.name;
}

function playTrack() {
    backgroundMusic.play();
    document.getElementById('playPauseBtn').textContent = '‚è∏';
}

function pauseTrack() {
    backgroundMusic.pause();
    document.getElementById('playPauseBtn').textContent = '‚ñ∂';
}

function prevTrack() {
    currentTrackIndex = (currentTrackIndex - 1 + tracks.length) % tracks.length;
    loadTrack(currentTrackIndex);
    playTrack();
}

function nextTrack() {
    currentTrackIndex = (currentTrackIndex + 1) % tracks.length;
    loadTrack(currentTrackIndex);
    playTrack();
}

backgroundMusic.addEventListener('ended', nextTrack);

function setVolume(volume) {
    backgroundMusic.volume = volume;
}

function fadeInMusic() {
    backgroundMusic.volume = 0;
    backgroundMusic.play();
    let volume = 0;
    const fadeInInterval = setInterval(() => {
        if (volume < 0.5) {
            volume += 0.01;
            backgroundMusic.volume = volume;
        } else {
            clearInterval(fadeInInterval);
        }
    }, 100);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–∫–∞ –∏ –ø–æ–ª–∑—É–Ω–∫–∞ –ø–µ—Ä–µ–º–æ—Ç–∫–∏ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
backgroundMusic.addEventListener('loadedmetadata', () => {
    if (durationSpan) {
      durationSpan.textContent = formatTime(backgroundMusic.duration);
    }
    if (seekBar) {
      seekBar.max = backgroundMusic.duration;
    }
});
backgroundMusic.addEventListener('timeupdate', () => {
    if (currentTimeSpan) {
      currentTimeSpan.textContent = formatTime(backgroundMusic.currentTime);
    }
    if (seekBar) {
      seekBar.value = backgroundMusic.currentTime;
    }
});

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
}

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏
const playMusicBtn = document.getElementById('playMusicBtn');
playMusicBtn.addEventListener('click', () => {
    fadeInMusic();
    playMusicBtn.style.display = 'none';
    document.getElementById('musicPlayer').style.display = 'block';
});

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ –ø–ª–µ–µ—Ä–∞
const togglePlayerBtn = document.getElementById('togglePlayer');
togglePlayerBtn.addEventListener('click', () => {
    const musicPlayer = document.getElementById('musicPlayer');
    if (musicPlayer.style.display === 'none' || musicPlayer.style.display === '') {
        musicPlayer.style.display = 'block';
        togglePlayerBtn.textContent = '–°–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä';
    } else {
        musicPlayer.style.display = 'none';
        togglePlayerBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–µ—Ä';
    }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º
document.getElementById('playPauseBtn').addEventListener('click', () => {
    if (backgroundMusic.paused) {
        playTrack();
    } else {
        pauseTrack();
    }
});
document.getElementById('prevTrackBtn').addEventListener('click', prevTrack);
document.getElementById('nextTrackBtn').addEventListener('click', nextTrack);
document.getElementById('volumeSlider').addEventListener('input', (e) => setVolume(e.target.value));

loadTrack(currentTrackIndex);
